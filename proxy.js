// api-proxy running on Vercel
// Author: David Awatere
// proxy.js
const fs = require('fs');
const express = require('express');
const axios = require('axios');
const app = express();
const port = process.env.PORT || 3000;


// Middleware to parse JSON body for POST requests
app.use(express.json());



// Function to transform the data from Supabase format to the required format
function transformData(sbData) {
    if (Array.isArray(sbData) && sbData.length > 0 && sbData[0]['relay_data']) {
        const relayData = sbData[0]['relay_data'];
        return relayData;
    } else {
        console.error('Unexpected data structure or empty array:', sbData);
        return {}; // or return an appropriate default value or error
    }
}

// JSON data
const jsonData = [
      {
        "platform": "android",
        "version": 2023.1,
        "supported": true,
        "latest": "2023.7",
        "latest_stable": "2023.7",
        "latest_beta": null
      },
      {
        "platform": "macos",
        "version": 2023.1,
        "supported": true,
        "latest": "2023.5",
        "latest_stable": "2023.5",
        "latest_beta": "2023.5-beta2"
      },
      {
        "platform": "windows",
        "version": 2023.1,
        "supported": true,
        "latest": "2023.5",
        "latest_stable": "2023.5",
        "latest_beta": "2023.5-beta1"
      },
      {
        "platform": "ios",
        "version": 2023.1,
        "supported": true,
        "latest": "2023.7",
        "latest_stable": "2023.7",
        "latest_beta": "2023.7"
      },
      {
        "platform": "linux",
        "version": 2023.1,
        "supported": true,
        "latest": "2023.5",
        "latest_stable": "2023.5",
        "latest_beta": "2023.5-beta1"
      }
];

//const relays = [
//{"locations":{"au-adl":{"country":"Australia","city":"Adelaide","latitude":-34.92123,"longitude":138.599503},"nl-ams":{"country":"Netherlands","city":"Amsterdam","latitude":52.35,"longitude":4.916667},"us-qas":{"country":"USA","city":"Ashburn, VA","latitude":39.043757,"longitude":-77.487442}}
//}];

const rawRelaysData = fs.readFileSync('relays.json', 'utf8');
const relays = JSON.parse(rawRelaysData);

// Predefined list of API addresses
const apiAddresses = [
    "34.70.75.123:443",
    "34.42.109.58:444",
        "8.8.8.8"
    // Add more addresses as needed
];

// New POST proxy endpoint for /auth/v1/token
/* unix: curl -X POST \
     -H "Content-Type: application/json" \
     -d '{"account_number":"3296934143562192"}' \
     https://api.mullvad.net/auth/v1/token

{"access_token":"mva_fedcf913645964bcb5332c1e3dd5ce851ef7ba3a98b6508982548403054e2e53","expiry":"2023-11-19T21:33:41+00:00"}  
(Note: Account number is generated by the app)*/

app.post('/auth/v1/token', async (req, res) => {
    console.log('Received POST request for /auth/v1/token with data:', req.body);
    try {
        // Simulate generating an access token and expiry date
        const accessToken = 'mva_fedcf913645964bcb5332c1e3dd5ce851ef7ba3a98b6508982548403054e2e53';
        const expiryDate = '2023-11-19T21:33:41+00:00';

        console.log('Successfully generated access token and expiry date');
        
        // Send a JSON response with the access token and expiry date
        res.json({ access_token: accessToken, expiry: expiryDate });
    } catch (error) {
        console.error('Error in POST /auth/v1/token:', error.message);
        res.status(500).send('Error while processing request');
    }
});

/* unix: curl -X POST \
     -H "Authorization: Bearer mva_1f8fd3174195d63278134614e9494309d25ba1a8684dece02444d520a5127df5" \
     https://api.mullvad.net/app/v1/www-auth-token

{"auth_token":"ce824a030d814abc6aa63812b262c99f"}%   */

app.post('/app/v1/www-auth-token', (req, res) => {
    // Extract the Authorization header from the request
    const authHeader = req.headers.authorization;

    // Check if the Authorization header is present and valid
    if (authHeader === 'Bearer mva_fedcf913645964bcb5332c1e3dd5ce851ef7ba3a98b6508982548403054e2e53') {
        // Respond with the auth token
        res.json({ auth_token: "ce824a030d814abc6aa63812b262c99f" });
    } else {
        // Handle invalid or missing Authorization header
        res.status(401).send('Unauthorized');
    }
});

app.post('/app/v1/submit-voucher', (req, res) => {
    // Array of valid voucher codes
    const validVoucherCodes = [
        "CODE-1234-ABCD-CODE", "CODE-5678-EFGH-CODE", "CODE-9012-IJKL-CODE",
        "CODE-3456-MNOP-CODE", "CODE-7890-QRST-CODE", "CODE-1357-UVWX-CODE",
        "CODE-2468-YZAB-CODE", "CODE-3690-CDEF-CODE", "CODE-1470-GHIJ-CODE",
        "CODE-2580-KLMN-CODE"
    ];
    // Extract the voucher code from the request body
    const { voucher_code } = req.body;

    // Validate the voucher code and calculate the new expiry
    // This is just a placeholder logic. Replace with your actual logic.
    // Check if the voucher code is in the array of valid codes
    if (validVoucherCodes.includes(voucher_code)) {
        // Example response
        //const response = {
        //    time_added: 2592000, // time in seconds
        //    new_expiry: new Date(Date.now() + 2592000000).toISOString() // new expiry date 30 days from now
        //    new_expiry: formatDate(new Date()), // Call formatDate to get the desired format
        const timeInSeconds = 2592000; // 30 days in seconds
        const newExpiryDate = new Date(Date.now() + timeInSeconds * 1000); // Calculate the new expiry date
        const response = {
            time_added: timeInSeconds, // time in seconds (30 days)
            new_expiry: formatDate(newExpiryDate), // Call formatDate to get the new expiry date in the desired format
    };

        res.json(response);
    } else {
        // Handle invalid voucher codes
        res.status(400).json({ error: 'Invalid voucher code' });
    }
});

function formatDate(date) {
    function pad(number) {
        if (number < 10) {
            return '0' + number;
        }
        return number;
    }

    return date.getUTCFullYear() +
        '-' + pad(date.getUTCMonth() + 1) +
        '-' + pad(date.getUTCDate()) +
        'T' + pad(date.getUTCHours()) +
        ':' + pad(date.getUTCMinutes()) +
        ':' + pad(date.getUTCSeconds()) +
        '+00:00'; // Time zone offset for UTC
}


app.post('/accounts/v1/accounts', (req, res) => {
    const response = {
        "id": "d8ca65f2-335c-4c0a-a6d7-2d4fd01bffa9",
        //"expiry": new Date().toISOString().replace('Z', '+00:00'), // Adjusted to match MV API's format
        "expiry": formatDate(new Date()), // Call formatDate to get the desired format
        "max_ports": 0,
        "can_add_ports": false,
        "max_devices": 5,
        "can_add_devices": true,
        "number": "5647180871195873"
    };
// Send 201 Created status code
    res.status(201).json(response);
    //res.json(response);
});

// Mock endpoint for creating a new device
app.post('/accounts/v1/devices', (req, res) => {
    // Extract data from request body
    const { pubkey, hijack_dns } = req.body;

    // Mock response using the example values from Mullvad VPN
    const response = {
        "id": "f69b7f68-adee-4575-a03c-9f56a2d15e82", // Example ID
        "name": "cuddly otter", // Example name
        "pubkey": pubkey, // Echoing back the pubkey from the request
        "hijack_dns": hijack_dns, // Echoing back the hijack_dns value from the request
        "created": "2023-11-26T15:50:25+00:00", // Example creation timestamp
        "ipv4_address": "10.134.153.2/32", // Example IPv4 address
        "ipv6_address": "fc00:bbbb:bbbb:bb01:d:0:6:9902/128", // Example IPv6 address
        "ports": [] // Example ports array, empty in this case
    };

    // Send the response
    res.status(201).json(response);
});

app.get('/accounts/v1/accounts/me', (req, res) => {
    // Create a mock response that mimics the Mullvad VPN API response
    const response = {
        "id": "58946512-3d45-46b6-a474-6008241aedad", // Example account ID
        "expiry": "2023-11-26T15:30:13+00:00", // Example expiry timestamp
        "max_ports": 0, // Example max ports
        "can_add_ports": false, // Example can add ports flag
        "max_devices": 5, // Example max devices
        "can_add_devices": true // Example can add devices flag
    };

    // Send the response
    res.json(response);
});

app.get('/app/v1/api-addrs', (req, res) => {
    res.json(apiAddresses);
});

app.get('/app/v1/releases/:platform/:version', (req, res) => {
    const { platform, version } = req.params;

    // Find the matching platform and version
    const matchingRelease = jsonData.find(row => 
        row.platform === platform && row.version.toString() === version);

    if (matchingRelease) {
        res.json({
            supported: matchingRelease.supported,
            latest: matchingRelease.latest,
            latest_stable: matchingRelease.latest_stable,
            latest_beta: matchingRelease.latest_beta || null
        });
    } else {
        res.status(404).send('No matching version found');
    }
});

app.get('/app/v1/relays', (req, res) => {
    res.json(relays);
});

app.listen(port, () => {
    console.log(`Proxy server running at http://localhost:${port}`);
});
